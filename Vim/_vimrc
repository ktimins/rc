" vim:fdm=marker

" Location Stuff {{{1

   if $LOCATION ==? 'WORK'
      let homedir = 'C:\\Users\\TiminsKy'
      let $home = 'C:\\Users\\Timinsky'
      let $storage = 'F:\\vim'
   elseif $LOCATION ==? 'THEIA'
      let homedir = 'C:\\Users\\rzite'
      let $home = 'C:\\Users\\rzite'
      let $storage = 'C:\\Users\\rzite\\.vimstorage'
   else 
      let $storage = ''
   endif

" }}}

" General {{{1

   " Startup {{{2

      let s:running_windows = has('win16') || has ('win32') || has ('win64')
      let s:colorful_term = (&term =~? 'xterm') || (&term =~? 'screen')

   " }}}

   " Leader
   let mapleader = ','

   " Sets how many lines of history VIM has to remember
   set history=9999

   " Sets the timeout length
   set timeoutlen=500

   " Set to auto read when a file is changed from the outside
   "set autoread

   " UTF-8 Encoding
   set encoding=utf-8

   " Set undo stuff {{{2
      
      " Persistent Undo
      set undolevels=1000
      " To undo forced reload with :e!
      set undoreload=10000

   " }}}

" }}}

" VIM User Interface {{{1

   " Avoid garbled characters in Chinese language windows OS
   let $LANG='en' 
   set langmenu=en

   " Turn on the Wild menu
   set wildmenu

   " Ignore compiled files
   set wildignore=*.pdf,*.pyo,*.pyc,*.zip,*.so,*.swp,*.dll,*.o,*.DS_Store,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png,*.a " ignore these
   if s:running_windows
      set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*,*\\bin\\*,*\\pkg\\*
   else
      set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/bin/*,*/pkg/*
   endif

   "Always show current position
   set ruler

   " Height of the command bar
   set cmdheight=2

   " A buffer becomes hidden when it is abandoned
   set hid

   " Configure backspace so it acts as it should act
   set backspace=indent,eol,start
   set whichwrap+=<,>,h,l

   " Ignore case when searching
   set ignorecase

   " When searching try to be smart about cases 
   set smartcase

   " Highlight search results
   set hlsearch

   " Makes search act like search in modern browsers
   set incsearch 

   " Don't redraw while executing macros (good performance config)
   set lazyredraw 

   " For regular expressions turn magic on
   set magic

   " Show matching brackets when text indicator is over them
   set showmatch 
   " How many tenths of a second to blink when matching brackets
   set mat=2

   " No annoying sound on errors
   set noerrorbells
   set novisualbell
   set t_vb=
   set tm=500

   " Add a bit extra margin to the left
   set foldcolumn=1

   " Set starting fold level
   set foldlevelstart=3

   " Set NOWRAP
   set nowrap

" }}}

" Vim-Plug {{{1

   if $LOCATION ==? 'WORK'
      call plug#begin('F:/vimstorage/plugged')
   else
      call plug#begin('~/.vim/plugged')
   endif

      Plug 'godlygeek/tabular'
      Plug 'vim-scripts/PatternsOnText'
      Plug 'vim-scripts/marvim'
      Plug 'scrooloose/vim-slumlord'
      Plug 'andymass/vim-matchup'
      Plug 'shime/vim-livedown'
      Plug 'maxbrunsfeld/vim-yankstack'
      Plug 'devjoe/vim-codequery'
      Plug 'sukima/xmledit'
      Plug 'jiangmiao/auto-pairs'

      " Configuration {{{2
         Plug 'editorconfig/editorconfig-vim'
      " }}}

      " Insert {{{2
         Plug 'scrooloose/nerdcommenter'
         Plug 'tpope/vim-repeat'
         Plug 'tpope/vim-surround'
         Plug 'honza/vim-snippets'
         Plug 'vim-scripts/align'
      " }}}

      " Formatting {{{2
         Plug 'chiel92/vim-autoformat'
         Plug 'XadillaX/json-formatter.vim'
         Plug 'Vimjas/vim-python-pep8-indent'
      " }}}

      " Checkers {{{2
         Plug 'tpope/vim-dispatch'
         Plug 'Shougo/vimproc.vim'
         Plug 'vim-syntastic/syntastic'
         Plug 'reedes/vim-wordy'
         Plug 'nvie/vim-flake8'
      " }}}

      " Languages {{{2
      Plug 'tacahiroy/vim-vb'
      " }}}

      " Undo {{{2
         Plug 'sjl/gundo.vim'
      " }}}

      " Visual {{{2
         Plug 'wellle/visual-split.vim'
         Plug 'nathanaelkane/vim-indent-guides'
         Plug 'mhinz/vim-startify'
         Plug 'chrisbra/csv.vim'
         Plug 'severin-lemaignan/vim-minimap'
         Plug 'myusuf3/numbers.vim'
         Plug 'skywind3000/vim-preview'
      " }}}

      " Completion {{{2
         Plug 'OmniSharp/omnisharp-vim'
      " }}}

      " Movement {{{2
         Plug 'yuttie/comfortable-motion.vim'
      " }}}

      " ColorSchemes {{{2
         Plug 'vim-scripts/fu'
         Plug 'vim-scripts/Selenitic'
      " }}}

      " NerdTree {{{2
         Plug 'scrooloose/nerdtree', { 'on' : 'NERDTreeToggle' }
         Plug 'xuyuanp/nerdtree-git-plugin'
      " }}}

      " Tabs {{{2
         Plug 'ap/vim-buftabline'
      " }}}

      " Syntax {{{2
         Plug 'aklt/plantuml-syntax'
         Plug 'elzr/vim-json'
         Plug 'othree/html5.vim'
         Plug 'sheerun/vim-polyglot'
         Plug 'OrangeT/vim-csharp'
         Plug 'othree/javascript-libraries-syntax.vim'
         Plug 'tacahiroy/vim-vb'
      " }}}

      " Coloring {{{2
         Plug 'ap/vim-css-color'
      " }}}

      " Search {{{2
         Plug 'ctrlpvim/ctrlp.vim'
      " }}}

      " Comments {{{2
         Plug 'scrooloose/nerdcommenter'
      " }}}

      " Source Control {{{2
         Plug 'mhinz/vim-signify'
         " Git {{{3
            Plug 'tpope/vim-git'
            Plug 'tpope/vim-fugitive'
            Plug 'tpope/vim-rhubarb'
            Plug 'junegunn/gv.vim'
            Plug 'idanarye/vim-merginal'
            Plug 'jreybert/vimagit'
         " }}}
      " }}}

      " Status Line {{{2
         Plug 'bling/vim-airline'
         Plug 'vim-airline/vim-airline-themes'
      " }}}

   " Tags {{{2
      Plug 'majutsushi/tagbar'
   "}}}

   call plug#end()

" }}}

" Colors and Fonts {{{1

   " Enable syntax highlighting
   syntax enable 

   " Enable 256 colors palette in Gnome Terminal
   if $COLORTERM ==? 'gnome-terminal'
       set t_Co=256
   endif

   " Set extra options when running in GUI mode
   if has('gui_running')
      " ColorScheme
      try
         "colorscheme selenitic
         colorscheme fu
      catch
         colorscheme elflord
      endtry

      " Font
      try
         " Prefer Anonymice Powerline. This is Anonymous Pro, but with Powerline hacks
         set guifont=Anonymice_Powerline:h11
      catch
         try
            " Else, get normal Anonymous Pro
            set guifont=Anonymous_Pro:h11
         catch
            " Failback to good old Courier New
            set guitfont=Courier_New:h11
         endtry
      endtry

      " Hide the mouse cursor when typing
      set mousehide

      set guioptions=b
      set guioptions-=T
      set guioptions-=e
      set t_Co=256
      set guitablabel=%M\ %t
   else
      colorscheme elflord
   endif

   " Set utf8 as standard encoding and en_US as the standard language
   set encoding=utf8

   " Use Unix as the standard file type
   set ffs=unix,dos,mac

" }}}

" Files, Backups, and Undo {{{1

   if s:running_windows && $storage !=? '' 
      set backup
      set undofile
      set backupdir=$storage\\_backup
      set undodir=$storage\\_undo
      set directory=$storage\\_temp
   else
      set nobackup
      set noundofile
   endif
   set noswapfile

" }}}

" Text, Tab, and Indent related {{{1

   " Use spaces instead of tabs
   set expandtab

   " Be smart when using tabs ;)
   set smarttab

   " 1 tab == 3 spaces
   set shiftwidth=3
   set tabstop=3

   if has('autocmd')
      filetype plugin indent on
      set shellslash
      set grepprg=grep\ -nH\ $*
      "let g:tex_flavor='latex'

      augroup vimrcEx
         au!
         autocmd BufReadPost *
                  \ if line('"\"') >= 1 && line('"\"') <= line('$') |
                  \  exe "normal! g`\"" |
                  \ endif
      augroup END
   else
      set autoindent
   endif

   set si "Smart indent

" }}}

" Diff {{{1

   if !exists(':DiffOrig')
      command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
               \ | wincmd p | diffthis
   endif

" }}}

" Visual Mode related {{{1

   " Visual mode pressing * or # searches for the current selection
   " Super useful! From an idea by Michael Naumann
   vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
   vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" }}}

" Moving Around, Tabs, Windows, Buffers {{{1

   " Disable highlight when <leader><cr> is pressed
   map <silent> <leader><cr> :noh<cr>

   " Smart way to move between windows
   map <C-j> <C-W>j
   map <C-k> <C-W>k
   map <C-h> <C-W>h
   map <C-l> <C-W>l

   " Close the current buffer
   map <leader>bd :Bclose<cr>:tabclose<cr>gT

   " Close all the buffers
   map <leader>ba :bufdo bd<cr>

   " Switch CWD to the directory of the open buffer
   map <leader>cd :cd %:p:h<cr>:pwd<cr>

   " Specify the behavior when switching between buffers 
   try
     set switchbuf=useopen,usetab,newtab
     set stal=2
   catch
   endtry

   " Return to last edit position when opening files (You want this!)
   augroup restart
      au BufReadPost * if line('"\"') > 1 && line('"\"') <= line('$') | exe 'normal! g'\'' | endif
   augroup END

" }}}

" Status Line {{{1

   " Always show the status line
   set laststatus=2

   " Airline {{{2

      " Syntastic {{{{3

         " Enable Syntastic integration
         let g:airline#extensions#syntastic#enabled=1

         " syntastic error_symbol >
         let airline#extensions#syntastic#error_symbol = 'E:'

         " syntastic statusline error format (see |syntastic_stl_format|) >
         let airline#extensions#syntastic#stl_format_err = '%E{[%e(#%fe)]}'

         " syntastic warning >
         let airline#extensions#syntastic#warning_symbol = 'W:'

         " syntastic statusline warning format (see |syntastic_stl_format|) >
         let airline#extensions#syntastic#stl_format_warn = '%W{[%w(#%fw)]}'

      " }}}

      " Tagbar {{{3

         " enable/disable tagbar integration 
           let g:airline#extensions#tagbar#enabled = 1

         " change how tags are displayed (:help tagbar-statusline) 
           let g:airline#extensions#tagbar#flags = ''
           let g:airline#extensions#tagbar#flags = 'f'
           let g:airline#extensions#tagbar#flags = 's'
           let g:airline#extensions#tagbar#flags = 'p'

      " }}} 

      " Powerline {{{3

         let g:airline_powerline_fonts=1

      " }}}

   " }}}

" }}}

" Spell Checking {{{1

   " Pressing ,ss will toggle and untoggle spell checking
   map <leader>ss :setlocal spell!<cr>

   " Shortcuts using <leader>
   map <leader>sn ]s
   map <leader>sp [s
   map <leader>sa zg
   map <leader>s? z=

" }}}

" Languages {{{1

   " All Languages {{{2

      augroup all_autocmd
         au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
      augroup END
   
   " }}}

   " Python {{{2

      augroup python
         au BufNewFile,BufRead *.py set tabstop=4
         au BufNewFile,BufRead *.py set softtabstop=4
         au BufNewFile,BufRead *.py set shiftwidth=4
         au BufNewFile,BufRead *.py set textwidth=79
         au BufNewFile,BufRead *.py set expandtab
         au BufNewFile,BufRead *.py set autoindent
         au FileType *.py let python_highlight_all=1
         au BufNewFile,BufRead *.py set fileformat=unix
      augroup END

      py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
   project_base_dir = os.environ['VIRTUAL_ENV']
   activate_this = os.path.join(project_base_dir, 'bin/activivate_this.py')
   execfile(activate_this, dict(__file__=activate_this))
EOF

   " }}}

   " JSON {{{2

      augroup json
        autocmd! 
        au BufRead,BufNewFile json set filetype=json
        au FileType json set autoindent 
        au FileType json set formatoptions=tcq2l 
        au FileType json set shiftwidth=4 
        au FileType json set softtabstop=4 tabstop=4
        au FileType json set expandtab 
        au FileType json set foldmethod=syntax 
        au BufNewFile,BufRead *.json nnoremap f== :%!python -m json.tool<CR>
      augroup END

   " }}}

   " XML {{{2

      augroup xml_grouping
         au!
         au FileType xml,xsd,sln,xaml let g:xml_syntax_folding=4
         au FileType xml,xsd,sln,xaml set cindent
         au FileType xml,xsd,sln,xaml set formatoptions=tcq2l
         au FileType xml,xsd,sln,xaml set shiftwidth=3 
         au FileType xml,xsd,sln,xaml set softtabstop=3 tabstop=8 
         au FileType xml,xsd,sln,xaml set expandtab 
         au FileType xml,xsd,sln,xaml set foldmethod=indent 
      augroup END
   
      " SLN {{{3
         augroup sln
            au!
            au BufRead, BufNewFile sln set filetype=sln
         augroup END
      " }}}
      
      " XSD {{{3

         augroup xsd
            au!
            au BufRead, BufNewFile xsd set filetype=xsd
         augroup END

      " }}}
   
      " XML {{{3
      
         augroup xml
            au!
            au BufRead, BufNewFile xml set filetype=xml
         augroup END

   " }}}

      " XAML {{{3
         augroup xaml
            au!
            au BufRead, BufNewFile *.xaml set filetype=xaml
         augroup END
      " }}}

   " }}}

   " Powershell {{{2

      augroup ps1
         au!
         au BufRead, BufNewFile *.ps1 set filetype=ps1
         au FileType ps1 set cindent
         au FileType ps1 set formatoptions=tcq2l
         au FileType ps1 set shiftwidth=3 
         au FileType ps1 set softtabstop=3 tabstop=3
         au FileType ps1 set expandtab 
         au FileType ps1 set foldmethod=indent 
      augroup END

   " }}}

   " Visual Basic {{{2

      augroup vb
         au!
         au FileType *.vb,*.cls,*.bas set filetype=vb
      augroup END

   " }}}

   " Vimscript {{{2

      augroup vimscript
         au!
         au FileType vim set foldlevelstart=0
      augroup END
   
   "}}}

" }}}

" Misc {{{1

   " Remove the Windows ^M - when the encodings gets messed up
   noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

   " Quickly open a buffer for scribble
   map <leader>q :e ~/buffer<cr>

   " Quickly open a markdown buffer for scribble
   map <leader>x :e ~/buffer.md<cr>

" }}}

" Startify {{{1

   if $LOCATION ==? 'WORK'
      let g:startify_bookmarks = [ {'v': 'C:/Users/TiminsKy/Git/rc/Vim/_vimrc'} ]
   elseif $LOCATION ==? 'THEIA'
      let g:startify_bookmarks = [ {'v': 'C:/Users/rzite/Git/rc/Vim/_vimrc'} ]
   endif

" }}}

" Syntastic {{{1

   let g:syntastic_always_populate_loc_list = 1
   let g:syntastic_auto_loc_list = 1
   let g:syntastic_check_on_open = 1
   let g:syntastic_check_on_wq = 0
   let g:syntastic_json_checkers = ['jsonlint']
   let g:syntastic_cs_checkers = ['mcs']
   let g:syntastic_python_checkers = ['frosted']
   let g:syntastic_html_checkers = ['tidy']
   let g:syntastic_xml_checkers = ['tidy']
   let g:syntastic_javascript_checkers = ['eslint']
   let g:syntastic_vim_checkers = ['vint']

" }}}

" TagBar {{{1

   " Map Tagbar 
   noremap <silent> <F10> :TagbarToggle<CR>

   " Tell Tagbar where ctags is
   if $LOCATION ==? 'WORK'
      let g:tagbar_ctags_bin = 'C:\Users\TiminsKY\bin\ctags\ctags.exe'
   elseif $LOCATION ==? 'THEIA'
      let g:tagbar_ctags_bin = 'C:\ProgramData\chocolatey\bin\ctags.exe'
   endif

   " Setup custom ctags settings
   " Powershell {{{2
      
      " PS1 {{{3
      
         let g:tagbar_type_ps1 = {
            \ 'ctagstype' : 'powershell',
            \ 'kinds'     : [
               \ 'f:function',
               \ 'c:class',
               \ 'd:class inherited',
               \ 'h:functionCall',
               \ 'i:filter',
               \ 'a:alias',
               \ 'r:region'
            \ ]
         \ }

      " }}}

      " PSM1 {{{3

         let g:tagbar_type_psm1 = {
            \ 'ctagstype' : 'powershell',
            \ 'kinds'     : [
               \ 'f:function',
               \ 'h:functionCall',
               \ 'i:filter',
               \ 'a:alias',
               \ 'r:region'
            \ ]
         \ }

      " }}}

   " Visual Basic {{{2

      let g:tagbar_type_vb = {
         \ 'ctagstype' : 'vb',
         \ 'kinds'     : [
            \ 's:subroutine',
            \ 'f:function',
            \ 'm:module variable',
            \ 'g:global variable',
            \ 'c:const',
            \ 'n:name',
            \ 'e:enum',
            \ 't:type',
            \ 'l:label'
         \ ]   
      \ }

      let g:tagbar_type_cls = {
         \ 'ctagstype' : 'vb',
         \ 'kinds'     : [
            \ 's:subroutine',
            \ 'f:function',
            \ 'm:module variable',
            \ 'g:global variable',
            \ 'c:const',
            \ 'n:name',
            \ 'e:enum',
            \ 't:type',
            \ 'l:label'
         \ ]   
      \ }

      let g:tagbar_type_bas = {
         \ 'ctagstype' : 'vb',
         \ 'kinds'     : [
            \ 's:subroutine',
            \ 'f:function',
            \ 'm:module variable',
            \ 'g:global variable',
            \ 'c:const',
            \ 'n:name',
            \ 'e:enum',
            \ 't:type',
            \ 'l:label'
         \ ]   
      \ }

   " }}}

   " XML {{{2

      " XML {{{3

         let g:tagbar_type_xml = {
            \ 'ctagstype'  : 'XML',
            \ 'kinds'      : [
               \ 'n:node set',
               \ 't:tagname'
            \ ]
         \ }

      " }}}
      
      " XSD {{{3

         let g:tagbar_type_xsd = {
            \ 'ctagstype'  : 'XSD',
            \ 'kinds'      : [
               \ 'c:ComplexType',
               \ 's:SimpleType',
               \ 'e:Element'
            \ ]
         \ }

      " }}}

   " }}}

" }}}

" Vim Indent Guides {{{1

   let g:indent_guides_enable_on_vim_startup = 1
   let g:indent_guides_start_level = 2
   let g:indent_guides_indent_levels = 30
   let g:indent_guides_guide_size = 1
   let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']

" }}}

" Nerd Tree {{{1

   augroup nerd_tree
      au!
      au StdinReadPre * let s:std_in=1
   augroup END

   noremap <C-n> :NERDTreeToggle<CR>
   noremap <C-z> :UndotreeToggle<CR>

" }}}

" BufTabLine {{{1

   " Keep buffers open without displaying them on the screen
   set hidden

   nnoremap <leader>bn :bnext<CR>
   nnoremap <leader>bp :bprev<CR>

" }}}

" OmniSharp {{{1

   " OmniSharp Server Path to EXE
   if $LOCATION ==? 'WORK'
      let g:OmniSharp_Server_path = 'C:\Users\TiminsKY\.omnisharp\OmniSharp.exe'
   elseif $LOCATION ==? 'THEIA'
      let g:OmniSHarp_Server_path = 'C:\Users\rzite\.omnisharp\OmniSharp.exe'
   endif

   " Select plugin for Code Actions and Find Symbols
   let g:OmniSharp_selector_ui = 'ctrlp'  " Use ctrlp
   " let g:OmniSharp_selector_ui = ''     " Use vim - command line, quickfix,  etc...

   " Automatically stop the server on close
   let g:OmniSharp_stop_server = 2

   " Set the type lookup function to use the preview window instead of echoing it
   let g:OmniSharp_typeLookupInPreview = 1

   " Timeout in seconds to wait for a response from the server
   let g:OmniSharp_timeout = 10

   let g:OmniSharp_server_type = 'roslyn'
   let g:OmniSharp_prefer_global_sln = 1

   " Don't autoselect first omnicomplete option, show options even if there is only
   " one (so the preview documentation is accessible). Remove 'preview' if you
   " don't want to see any documentation whatsoever.
   set completeopt=longest,menuone,preview

   " Set desired preview window height for viewing documentation.
   " You might also want to look at the echodoc plugin.
   set previewheight=5

   augroup omnisharp_commands
       autocmd!

       " Synchronous build (blocks Vim)
       "autocmd FileType cs nnoremap <buffer> <F5> :wa!<CR>:OmniSharpBuild<CR>
       " Builds can also run asynchronously with vim-dispatch installed
       autocmd FileType cs nnoremap <buffer> <Leader>b :wa!<CR>:OmniSharpBuildAsync<CR>
       " Automatic syntax check on events (TextChanged requires Vim 7.4)
       autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

       " Automatically add new cs files to the nearest project on save
       autocmd BufWritePost *.cs call OmniSharp#AddToProject()

       " Show type information automatically when the cursor stops moving
       autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

       " The following commands are contextual, based on the cursor position.
       autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
       autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
       autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
       autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

       " Finds members in the current buffer
       autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

       " Cursor can be anywhere on the line containing an issue
       autocmd FileType cs nnoremap <buffer> <Leader>x  :OmniSharpFixIssue<CR>
       autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
       autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
       autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>

       " Navigate up and down by method/property/field
       autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>
       autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>
   augroup END

   " Contextual code actions (uses fzf, CtrlP or unite.vim when available)
   nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>
   " Run code actions with text selected in visual mode to extract method
   xnoremap <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>

   " Rename with dialog
   nnoremap <Leader>nm :OmniSharpRename<CR>
   nnoremap <F2> :OmniSharpRename<CR>
   " Rename without dialog - with cursor on the symbol to rename: `:Rename newname`
   command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

   " Force OmniSharp to reload the solution. Useful when switching branches etc.
   nnoremap <Leader>rl :OmniSharpReloadSolution<CR>
   nnoremap <Leader>cf :OmniSharpCodeFormat<CR>
   " Load the current .cs file to the nearest project
   nnoremap <Leader>tp :OmniSharpAddToProject<CR>

   " Start the omnisharp server for the current solution
   nnoremap <Leader>ss :OmniSharpStartServer<CR>
   nnoremap <Leader>sp :OmniSharpStopServer<CR>

   " Add syntax highlighting for types and interfaces
   nnoremap <Leader>th :OmniSharpHighlightTypes<CR>

   " Enable snippet completion
   let g:OmniSharp_want_snippet=1

" }}}

" Signify {{{1
   let g:signify_vcs_list = [ 'git', 'tfs' ]
   let g:signify_realtime = 1
" }}}

" Numbers {{{1
   
   let g:numbers_exclude = ['tagbar', 'gundo', 'nerdtree', 'minimap']

" }}}

" Comfortable Motion {{{1

   let g:comfortable_motion_scroll_down_key = 'j'
   let g:comfortable_motion_scroll_up_key = 'k'
   let g:comfortable_motion_no_default_key_mappings = 1

   "" Reset the C-f and C-b to be slightly less than what it defaults to
   "nnoremap <silent> <C-f> :call comfortable_motion#flick(200)<CR>
   "nnoremap <silent> <C-b> :call comfortable_motion#flick(-200)<CR>

   "" Friction and Air Resistance
   "let g:comfortable_motion_friction = 0.0
   "let g:comfortable_motion_air_drag = 4.0

   let g:comfortable_motion_impulse_multiplier = 0.5  " Feel free to increase/decrease this value.
   nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
   nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
   nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
   nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>

"}}}

" Colemak {{{1

   " This hack allows me to type in insert mode and command 'bar' as colemak
   " while keeping all commands as QWERTY
   
   noremap! e f
   noremap! r p
   noremap! t g
   noremap! y j
   noremap! u l
   noremap! i u
   noremap! o y
   noremap! p ;
   noremap! s r
   noremap! d s
   noremap! f t
   noremap! g d
   noremap! j n
   noremap! k e
   noremap! l i
   noremap! ; o
   noremap! n k
   noremap! E F
   noremap! R P
   noremap! T G
   noremap! Y J
   noremap! U L
   noremap! I U
   noremap! O Y
   noremap! P :
   noremap! S R
   noremap! D S
   noremap! F T
   noremap! G D
   noremap! J N
   noremap! K E
   noremap! L I
   noremap! : O
   noremap! N K

" }}}
