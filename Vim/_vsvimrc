" vim:fdm=marker

" Location Stuff {{{1

   if $LOCATION ==? 'WORK'
      let homedir = 'C:\\Users\\TiminsKy'
      let $home = 'C:\\Users\\Timinsky'
      let $storage = 'F:\\vim'
   elseif $LOCATION ==? 'THEIA'
      let homedir = 'C:\\Users\\rzite'
      let $home = 'C:\\Users\\rzite'
      let $storage = 'C:\\Users\\rzite\\.vimstorage'
   else 
      let $storage = ''
   endif

" }}}

" General {{{1

   " Startup {{{2

      let s:running_windows = has('win16') || has ('win32') || has ('win64')
      let s:colorful_term = (&term =~? 'xterm') || (&term =~? 'screen')

   " }}}

   " Leader
   let mapleader = ','

   " Sets how many lines of history VIM has to remember
   set history=9999

   " Sets the timeout length
   set timeoutlen=500

   " Set to auto read when a file is changed from the outside
   "set autoread

   " UTF-8 Encoding
   set encoding=utf-8

   " Set undo stuff {{{2
      
      " Persistent Undo
      set undolevels=1000
      " To undo forced reload with :e!
      set undoreload=10000

   " }}}

" }}}

" VIM User Interface {{{1

   " Avoid garbled characters in Chinese language windows OS
   let $LANG='en' 
   set langmenu=en

   " Turn on the Wild menu
   set wildmenu

   " Ignore compiled files
   set wildignore=*.pdf,*.pyo,*.pyc,*.zip,*.so,*.swp,*.dll,*.o,*.DS_Store,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png,*.a " ignore these
   if s:running_windows
      set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*,*\\bin\\*,*\\pkg\\*
   else
      set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/bin/*,*/pkg/*
   endif

   "Always show current position
   set ruler

   " Height of the command bar
   set cmdheight=2

   " A buffer becomes hidden when it is abandoned
   set hid

   " Configure backspace so it acts as it should act
   set backspace=indent,eol,start
   set whichwrap+=<,>,h,l

   " Ignore case when searching
   set ignorecase

   " When searching try to be smart about cases 
   set smartcase

   " Highlight search results
   set hlsearch

   " Makes search act like search in modern browsers
   set incsearch 

   " Don't redraw while executing macros (good performance config)
   set lazyredraw 

   " For regular expressions turn magic on
   set magic

   " Show matching brackets when text indicator is over them
   set showmatch 
   " How many tenths of a second to blink when matching brackets
   set mat=2

   " No annoying sound on errors
   set noerrorbells
   set novisualbell
   set t_vb=
   set tm=500

   " Add a bit extra margin to the left
   set foldcolumn=1

" }}}

" Colors and Fonts {{{1

   " Enable syntax highlighting
   syntax enable 

   " Set utf8 as standard encoding and en_US as the standard language
   set encoding=utf8

   " Use Unix as the standard file type
   set ffs=unix,dos,mac

" }}}

" Files, Backups, and Undo {{{1

   if s:running_windows && $storage !=? '' 
      set backup
      set undofile
      set backupdir=$storage\\_backup
      set undodir=$storage\\_undo
      set directory=$storage\\_temp
   else
      set nobackup
      set noundofile
   endif
   set noswapfile

" }}}

" Text, Tab, and Indent related {{{1

   " Use spaces instead of tabs
   set expandtab

   " Be smart when using tabs ;)
   set smarttab

   " 1 tab == 3 spaces
   set shiftwidth=3
   set tabstop=3

   if has('autocmd')
      filetype plugin indent on
      set shellslash
      set grepprg=grep\ -nH\ $*
      "let g:tex_flavor='latex'

      augroup vimrcEx
         au!
         autocmd BufReadPost *
                  \ if line('"\"') >= 1 && line('"\"') <= line('$') |
                  \  exe "normal! g`\"" |
                  \ endif
      augroup END
   else
      set autoindent
   endif

   set si "Smart indent

" }}}

" Visual Mode related {{{1

   " Visual mode pressing * or # searches for the current selection
   " Super useful! From an idea by Michael Naumann
   vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
   vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" }}}

" Moving Around, Tabs, Windows, Buffers {{{1

   " Disable highlight when <leader><cr> is pressed
   map <silent> <leader><cr> :noh<cr>

   " Smart way to move between windows
   map <C-j> <C-W>j
   map <C-k> <C-W>k
   map <C-h> <C-W>h
   map <C-l> <C-W>l

   " Close the current buffer
   map <leader>bd :Bclose<cr>:tabclose<cr>gT

   " Close all the buffers
   map <leader>ba :bufdo bd<cr>

   " Switch CWD to the directory of the open buffer
   map <leader>cd :cd %:p:h<cr>:pwd<cr>

   " Specify the behavior when switching between buffers 
   try
     set switchbuf=useopen,usetab,newtab
     set stal=2
   catch
   endtry

   " Return to last edit position when opening files (You want this!)
   augroup restart
      au BufReadPost * if line('"\"') > 1 && line('"\"') <= line('$') | exe 'normal! g'\'' | endif
   augroup END

" }}}

" Spell Checking {{{1

   " Pressing ,ss will toggle and untoggle spell checking
   map <leader>ss :setlocal spell!<cr>

   " Shortcuts using <leader>
   map <leader>sn ]s
   map <leader>sp [s
   map <leader>sa zg
   map <leader>s? z=

" }}}

" Languages {{{1

   " All Languages {{{2

      augroup all_autocmd
         au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
      augroup END
   
   " }}}

   " JSON {{{2

      augroup json
        autocmd! 
        au BufRead,BufNewFile json set filetype=json
        au FileType json set autoindent 
        au FileType json set formatoptions=tcq2l 
        au FileType json set shiftwidth=4 
        au FileType json set softtabstop=4 tabstop=4
        au FileType json set expandtab 
        au FileType json set foldmethod=syntax 
        au BufNewFile,BufRead *.json nnoremap f== :%!python -m json.tool<CR>
      augroup END

   " }}}

   " XML {{{2

      augroup xml_grouping
         au!
         au FileType xml,xsd,sln,xaml let g:xml_syntax_folding
         au FileType xml,xsd,sln,xaml set cindent
         au FileType xml,xsd,sln,xaml set formatoptions=tcq2l
         au FileType xml,xsd,sln,xaml set shiftwidth=3 
         au FileType xml,xsd,sln,xaml set softtabstop=3 tabstop=8 
         au FileType xml,xsd,sln,xaml set expandtab 
         au FileType xml,xsd,sln,xaml set foldmethod=indent 
      augroup END
   
      " SLN {{{3
         augroup sln
            au!
            au BufRead, BufNewFile *.sln set filetype=sln
         augroup END
      " }}}
      
      " XSD {{{3

         augroup xml
            au!
            au BufRead, BufNewFile *.xsd set filetype=xsd
         augroup END

      " }}}
   
      " XML {{{3
      
         augroup xml
            au!
            au BufRead, BufNewFile *.xml set filetype=xml
         augroup END

   " }}}

      " XAML {{{3
         augroup xaml
            au!
            au BufRead, BufNewFile *.xaml set filetype=xaml
         augroup END
      " }}}

   " }}}

   " Powershell {{{2

      augroup ps1
         au!
         au BufRead, BufNewFile *.ps1 set filetype=ps1
         au FileType ps1 set cindent
         au FileType ps1 set formatoptions=tcq2l
         au FileType ps1 set shiftwidth=3 
         au FileType ps1 set softtabstop=3 tabstop=3
         au FileType ps1 set expandtab 
         au FileType ps1 set foldmethod=indent 
      augroup END

   " }}}

   " Visual Basic {{{2

      augroup vb
         au!
         au FileType vb,cls,bas set filetype=vb
      augroup END

   " }}}

" }}}

" Misc {{{1

   " Remove the Windows ^M - when the encodings gets messed up
   noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

   " Quickly open a buffer for scribble
   map <leader>q :e ~/buffer<cr>

   " Quickly open a markdown buffer for scribble
   map <leader>x :e ~/buffer.md<cr>

" }}}

" BufTabLine {{{1

   " Keep buffers open without displaying them on the screen
   set hidden

   nnoremap <leader>bn :bnext<CR>
   nnoremap <leader>bp :bprev<CR>

" }}}

" Colemak {{{1

   " This hack allows me to type in insert mode and command 'bar' as colemak
   " while keeping all commands as QWERTY
   
   noremap! e f
   noremap! r p
   noremap! t g
   noremap! y j
   noremap! u l
   noremap! i u
   noremap! o y
   noremap! p ;
   noremap! s r
   noremap! d s
   noremap! f t
   noremap! g d
   noremap! j n
   noremap! k e
   noremap! l i
   noremap! ; o
   noremap! n k
   noremap! E F
   noremap! R P
   noremap! T G
   noremap! Y J
   noremap! U L
   noremap! I U
   noremap! O Y
   noremap! P :
   noremap! S R
   noremap! D S
   noremap! F T
   noremap! G D
   noremap! J N
   noremap! K E
   noremap! L I
   noremap! : O
   noremap! N K

" }}}
