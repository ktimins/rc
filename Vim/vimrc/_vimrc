" vim:fdm=marker


" .vimrc {{{1

   " Needed Stuff {{{2

      set nossl
      set encoding=utf8
      set fileencoding=utf8
      set termencoding=utf8

   " }}}

   " Location Stuff {{{2
      if $LOCATION ==? 'WORK'
         if has("win32unix")
            let homedir = '~'
            let $home = '~'
            let $storage = '~/.vimstorage'
            let $vimrc_plug = '~/.vimrc.plug'
         else
            let homedir = 'C:\Users\KTimins'
            let $home = 'C:\Users\KTimins'
            let $storage = 'C:\Users\KTimins\.vimstorage'
            let $vimrc_plug = 'C:\Users\KTimins\_vimrc.plug'
         endif
      elseif $LOCATION ==? 'THEIA'
         let homedir = 'C:\Users\rzite'
         let $home = 'C:\Users\rzite'
         let $storage = 'C:\Users\rzite\.vimstorage'
         let $vimrc_plug = '~\_vimrc.plug'
      elseif $LOCATION ==? 'ARES'
         let homedir = 'C:\Users\rzitex'
         let $home = 'C:\Users\rzitex'
         let $storage = 'C:\Users\rzitex\.vim\storage'
         let $vimrc_plug = 'C:\Users\rzitex\_vimrc.plug'
      else 
         let $storage = ''
         let $vimrc_plug = '~/.vimrc.plug'
      endif

   " }}}

   " General {{{2

      " Startup 

         let s:running_windows = has('win16') || has ('win32') || has ('win64')
         let s:colorful_term = (&term =~? 'xterm') || (&term =~? 'screen')

      " Nocompatible - Make vim not compatible with old vi
      set nocompatible

      " Leader
      let mapleader = ','

      " Sets how many lines of history VIM has to remember
      set history=9999

      " Sets the timeout length
      set timeoutlen=500

      " Set to auto read when a file is changed from the outside
      "set autoread

      " Set undo stuff {{{3
         
         " Persistent Undo
         set undolevels=1000
         " To undo forced reload with :e!
         set undoreload=10000

      " }}}

      " Auto Change directory to current buffer
      autocmd BufEnter,BufRead,BufNewFile * silent! lcd %:p:h<cr>

   " }}}

   " VIM User Interface {{{2

      " Avoid garbled characters in Chinese language windows OS
      let $LANG='en' 
      set langmenu=en

      " Turn on the Wild menu
      set wildmenu

      " Ignore compiled files
      set wildignore=*.pdf,*.pyo,*.pyc,*.zip,*.so,*.swp,*.dll,*.o,*.DS_Store,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png,*.a " ignore these
      if s:running_windows
         set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*,*\\bin\\*,*\\pkg\\*,*\\.vs\\*,*\\.localhistory\\*
      else
         set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/bin/*,*/pkg/*,*/.vs/*,*/.localhistory/*
      endif

      " Set Numbers
      set number
      "set relativenumber

      "Always show current position
      set ruler

      " Height of the command bar
      set cmdheight=2

      " A buffer becomes hidden when it is abandoned
      set hid

      " Configure backspace so it acts as it should act
      set backspace=indent,eol,start
      set whichwrap+=<,>,h,l

      " Ignore case when searching
      set ignorecase

      " When searching try to be smart about cases 
      set smartcase

      " Highlight search results
      set hlsearch

      " Makes search act like search in modern browsers
      set incsearch 

      " Don't redraw while executing macros (good performance config)
      set lazyredraw 

      " For regular expressions turn magic on
      set magic

      " Show matching brackets when text indicator is over them
      set showmatch 
      " How many tenths of a second to blink when matching brackets
      set mat=2

      " No annoying sound on errors
      set noerrorbells
      set novisualbell
      set t_vb=
      set tm=500

      " Add a bit extra margin to the left
      set foldcolumn=1

      " Set starting fold level
      set foldlevelstart=3

      " Set NOWRAP
      set nowrap

      " Set rendering 
      if s:running_windows
         set renderoptions=type:directx
      endif

   " }}}

   " Vim-Polyglot {{{2

   let g:polyglot_disabled = ['markdown']

   " }}}

   " Vim-Plug {{{2

      " Call the [\._]vimrc.plug file
      if filereadable(expand($vimrc_plug))
         execute "source " . $vimrc_plug
      endif

   " }}}

   " Colors and Fonts {{{2

      " Enable syntax highlighting
      syntax enable 

      " Enable 256 colors palette in Gnome Terminal
      if $COLORTERM ==? 'gnome-terminal'
          set t_Co=256
      endif

      " ConEmu {{{3

         " ConEmu
         if !empty($CONEMUBUILD)
            "set termencoding=utf8
            "set term=xterm
            "set t_Co=256
            "let &t_AB="\e[48;5;%dm"
            "let &t_AF="\e[38;5;%dm"
            " termcap codes for cursor shape changes on entry and exit to
            " /from insert mode
            " doesn't work
            "let &t_ti="\e[1 q"
            "let &t_SI="\e[5 q"
            "let &t_EI="\e[1 q"
            "let &t_te="\e[0 q"
         endif

      " }}}

      " Set extra options when running in GUI mode
      if has('gui_running')

         " ColorScheme
         try
	       colorscheme anderson
         catch
            try
	            colorscheme selenitic
            catch
               try
                  colorscheme archery
               catch
                  colorscheme darkblue
               endtry
            endtry
         endtry

         " Font
         try
            set guifont=CaskaydiaCove_Nerd_Font_Mono:h10
         catch
            try
               set guifont=HackGenNerd_Console:h11
            catch
               try
                  set guifont=Source_Code_Pro:h11
               catch
                  try
                     set guifont=Anonymous_Pro:h11
                  catch
                     set guifont=Courier_New:h11
                  endtry
               endtry
            endtry
         endtry

         " Hide the mouse cursor when typing
         set mousehide

         " Bottom Scroll Bar
         set guioptions=b

         " Toolbar
         "set guioptions+=T
         set guioptions-=T

         " System Menu
         "set guioptions+=m
         set guioptions-=m

         " No Tab Pages by default
         set guioptions-=e

         " Right Hand Scroll Bar
         set guioptions+=r
         set t_Co=256
         set guitablabel=%M\ %t
      else
         try
            colorscheme zenburn
         catch
            try
               colorscheme molokai_dark
            catch 
               colorscheme default
            endtry
         endtry

      endif

      " Use Unix as the standard file type
      set ffs=unix,dos

   " }}}

   " Files, Backups, and Undo {{{2

      if s:running_windows && $storage !=? '' 
         set backup
         set backupdir=$storage\\_backup
         set undofile
         set undodir=$storage\\_undo
         set swapfile
         set directory=$storage\\_temp
      else
         set nobackup
         set noundofile
         set noswapfile
      endif

   " }}}

   " Text, Tab, and Indent related {{{2

      " Use spaces instead of tabs
      set expandtab

      " Be smart when using tabs ;)
      set smarttab

      " 1 tab == 3 spaces
      set shiftwidth=3
      set tabstop=3

      filetype plugin indent on

      if has('autocmd')
         "filetype plugin indent on
         set shellslash
         set grepprg=grep\ -nH\ $*
         "let g:tex_flavor='latex'

         augroup vimrcEx
            au!
            autocmd BufReadPost *
                     \ if line('"\"') >= 1 && line('"\"') <= line('$') |
                     \  exe "normal! g`\"" |
                     \ endif
         augroup END
      else
         set autoindent
      endif

      set si "Smart indent

   " }}}

   " Diff {{{2
    
      " started In Diff-Mode set diffexpr (plugin not loaded yet)
      "if &diff
          "let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
      "endif

      if has("patch-8.1.0360") 
         set diffopt+=algorithm:patience 
      endif

      if has("patch-8.1.0360") 
         set diffopt+=internal,algorithm:patience 
      endif

      if !exists(':DiffOrig')
         command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                  \ | wincmd p | diffthis
      endif

   " }}}

   " Visual Mode related {{{2

      " Visual mode pressing * or # searches for the current selection
      " Super useful! From an idea by Michael Naumann
      vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
      vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

   " }}}

   " Moving Around, Tabs, Windows, Buffers {{{2

      " Disable highlight when <leader><cr> is pressed
      noremap <silent> <leader><cr> :noh<cr>

      " Smart way to move between windows
      noremap <C-j> <C-W>j
      noremap <C-k> <C-W>k
      noremap <C-h> <C-W>h
      noremap <C-l> <C-W>l

      " Close the current buffer
      noremap <leader>bc :Bclose<cr>:tabclose<cr>gT

      " Delete the current buffer
      noremap <leader>bd :bdelete<cr>

      " Close all the buffers
      noremap <leader>ba :bufdo bd<cr>

      " Switch CWD to the directory of the open buffer
      noremap <leader>cd :cd %:p:h<cr>:pwd<cr>

      " Specify the behavior when switching between buffers 
      try
        set switchbuf=useopen,usetab,newtab
        set stal=2
      catch
      endtry

      " Return to last edit position when opening files (You want this!)
      augroup restart
         au BufReadPost * if line('"\"') > 1 && line('"\"') <= line('$') | exe 'normal! g'\'' | endif
      augroup END

   " }}}

   " Status Line {{{2

      " Always show the status line
      set laststatus=2

      " Airline {{{3

         "let g:airline_statusline_ontop = 1 

         " ALE {{{4
            
            "let g:airline#extensions#ale#enabled = 1

         " }}}

         "" Syntastic {{{4

            "" Enable Syntastic integration
            "let g:airline#extensions#syntastic#enabled=1

            "" syntastic error_symbol >
            "let airline#extensions#syntastic#error_symbol = 'E:'

            "" syntastic statusline error format (see |syntastic_stl_format|) >
            "let airline#extensions#syntastic#stl_format_err = '%E{[%e(#%fe)]}'

            "" syntastic warning >
            "let airline#extensions#syntastic#warning_symbol = 'W:'

            "" syntastic statusline warning format (see |syntastic_stl_format|) >
            "let airline#extensions#syntastic#stl_format_warn = '%W{[%w(#%fw)]}'

         "" }}}

         "" Tagbar {{{4

            "" enable/disable tagbar integration 
              "let g:airline#extensions#tagbar#enabled = 1

            "" change how tags are displayed (:help tagbar-statusline) 
              "let g:airline#extensions#tagbar#flags = ''
              "let g:airline#extensions#tagbar#flags = 'f'
              "let g:airline#extensions#tagbar#flags = 's'
              "let g:airline#extensions#tagbar#flags = 'p'

         "" }}} 

         " Powerline {{{4

            let g:airline_powerline_fonts = 1

         " }}}
      
         " GitGutter {{{4
      
         " }}}

         " Vista {{{4
      
         function! NearestMethodOrFunction() abort
            return get(b:, 'vista_nearest_method_or_function', '')
         endfunction

         set statusline+=%{NearestMethodOrFunction()}

         " By default vista.vim never run if you don't call it explicitly.
         "
         " If you want to show the nearest function in your statusline automatically,
         " you can add the following line to your vimrc 
         "autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

         " }}}

      " }}}

   " }}}

   " Spell Checking {{{2

      " Pressing ,ss will toggle and untoggle spell checking
      map <leader>ss :setlocal spell!<cr>

      " Shortcuts using <leader>
      map <leader>sn ]s
      map <leader>sp [s
      map <leader>sa zg
      map <leader>s? z=

   " }}}

   " Misc {{{2

      " Remove the Windows ^M - when the encodings gets messed up
      noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

      " Quickly open a buffer for scribble
      map <leader>q :e ~/buffer<cr>

      " Quickly open a markdown buffer for scribble
      map <leader>x :e ~/buffer.md<cr>

      " nohl
      nnoremap <leader>n :nohl<cr>

   " }}}

   " Startify {{{2

   if $LOCATION ==? 'WORK'
      let g:startify_bookmarks = [ 
               \ {'v': 'C:/Users/KTimins/Git/rc/Vim/vimrc/_vimrc'}, 
               \ {'b': 'C:/Users/KTimins/Git/rc/Vim/vimrc/_vimrc.plug'}, 
               \ {'p': 'C:/Users/KTimins/OneDrive - lazparking.com/Documents/PowerShell/Microsoft.PowerShell_profile.ps1'},
               \ {'m': 'C:/Users/KTimins/Git/rc/Windows/Microsoft.Powershell_profile.ps1'} 
               \ ]
   elseif $LOCATION ==? 'THEIA'
      let g:startify_bookmarks = [ 
               \ {'v': 'C:/Users/rzite/Git/rc/Vim/vimrc/_vimrc'}, 
               \ {'b': 'C:/Users/rzite/Git/rc/Vim/vimrc/_vimrc.plug'}, 
               \ {'p': 'C:/Users/rzite/Git/rc/Windows/Microsoft.Powershell_profile.ps1'} 
               \ ]
   elseif $LOCATION ==? 'ARES'
      let g:startify_bookmarks = [ 
               \ {'v': 'C:/Users/rzitex/Git/rc/Vim/vimrc/_vimrc'}, 
               \ {'b': 'C:/Users/rzitex/Git/rc/Vim/vimrc/_vimrc.plug'}, 
               \ {'p': 'C:/Users/rzitex/Git/rc/Windows/Microsoft.Powershell_profile.ps1'} 
               \ ]
   endif

   " }}}

   " ALE {{{2

      " Only run linters named in ale_linters settings.
      "let g:ale_linters_explicit = 1

      "let g:ale_linters = {
         "\  'javascript': ['eslint'],
         "\  'json': ['jsonlint'],
         "\  'cs': ['OmniSharp'],
         "\  'python': ['frosted'],
         "\  'html': ['tidy'],
         "\  'xml': ['tidy', 'xmllint'],
         "\  'vim': ['vint'],
         "\  'powershell': ['powershell', 'psscriptanalyzer']
      "\}

   " }}}

   "" Syntastic {{{2

      "let g:syntastic_always_populate_loc_list = 1
      "let g:syntastic_auto_loc_list = 1
      "let g:syntastic_check_on_open = 0
      "let g:syntastic_check_on_wq = 0
      "let g:syntastic_json_checkers = ['jsonlint']
      "let g:syntastic_cs_checkers = ['mcs']
      "let g:syntastic_python_checkers = ['frosted']
      "let g:syntastic_html_checkers = ['tidy']
      ""let g:syntastic_xml_checkers = ['tidy']
      "let g:syntastic_xml_checkers = ['xmllint']
      "let g:syntastic_javascript_checkers = ['eslint']
      "let g:syntastic_vim_checkers = ['vint']

   "" }}}

   " Vista {{{2

      let g:vista#renderer#enable_icon = 1

      " Map Vista 
      noremap <silent> <F10> :Vista!!<CR>

      let g:vista_default_executive = 'ctags'

      let g:vista#renderer#icons = {
               \ "function": "\uf794",
               \ "variable": "\uf71b",
               \ }

      "autocmd FileType vista,vista_kind nnoremap <buffer> <silent> \
         "/ :<c-u>call vista#finder#fzf#Run()<CR>

   " }}}
   
   "" TagBar {{{2

      "" Map Tagbar 
      "noremap <silent> <F10> :TagbarToggle<CR>

      "" Tell Tagbar where ctags is
      "if $LOCATION ==? 'WORK' || $LOCATION ==? 'THEIA'
         "let g:tagbar_ctags_bin = 'C:\Users\TiminsKY\bin\ctags\ctags.exe'
      "endif

      "" Setup custom ctags settings

      "" vimrc {{{3
   
         "let g:tagbar_type_vim = {
            "\ 'ctagstype'  : 'vim',
            "\ 'kinds'      : [
               "\ 'g:group',
               "\ 'f:function definitions',
               "\ 'c:user-defined commands',
               "\ 'a:autocommand groups'
            "\ ]
         "\ }

      "" }}}

      "" Powershell {{{3
         
         "" PS1 {{{4
         
            "let g:tagbar_type_ps1 = {
               "\ 'ctagstype' : 'powershell',
               "\ 'kinds'     : [
                  "\ 'f:function',
                  "\ 'c:class',
                  "\ 'd:class inherited',
                  "\ 'h:functionCall',
                  "\ 'i:filter',
                  "\ 'a:alias',
                  "\ 'r:region'
               "\ ]
            "\ }

         "" }}}

         "" PSM1 {{{4

            "let g:tagbar_type_psm1 = {
               "\ 'ctagstype' : 'powershell',
               "\ 'kinds'     : [
                  "\ 'f:function',
                  "\ 'h:functionCall',
                  "\ 'i:filter',
                  "\ 'a:alias',
                  "\ 'r:region'
               "\ ]
            "\ }

         "" }}}

      "" }}}

      "" Visual Basic {{{3

         "let g:tagbar_type_vb = {
            "\ 'ctagstype' : 'vb',
            "\ 'kinds'     : [
               "\ 's:subroutine',
               "\ 'f:function',
               "\ 'm:module variable',
               "\ 'g:global variable',
               "\ 'c:const',
               "\ 'n:name',
               "\ 'e:enum',
               "\ 't:type',
               "\ 'l:label'
            "\ ]   
         "\ }

         "let g:tagbar_type_vbnet = {
            "\ 'ctagstype' : 'vb',
            "\ 'kinds'     : [
               "\ 's:subroutine',
               "\ 'f:function',
               "\ 'm:module variable',
               "\ 'g:global variable',
               "\ 'c:const',
               "\ 'n:name',
               "\ 'e:enum',
               "\ 't:type',
               "\ 'l:label'
            "\ ]   
         "\ }

         "let g:tagbar_type_cls = {
            "\ 'ctagstype' : 'vb',
            "\ 'kinds'     : [
               "\ 's:subroutine',
               "\ 'f:function',
               "\ 'm:module variable',
               "\ 'g:global variable',
               "\ 'c:const',
               "\ 'n:name',
               "\ 'e:enum',
               "\ 't:type',
               "\ 'l:label'
            "\ ]   
         "\ }

         "let g:tagbar_type_bas = {
            "\ 'ctagstype' : 'vb',
            "\ 'kinds'     : [
               "\ 's:subroutine',
               "\ 'f:function',
               "\ 'm:module variable',
               "\ 'g:global variable',
               "\ 'c:const',
               "\ 'n:name',
               "\ 'e:enum',
               "\ 't:type',
               "\ 'l:label'
            "\ ]   
         "\ }

      "" }}}

      "" XML {{{3

         "" XML {{{4

            "let g:tagbar_type_xml = {
               "\ 'ctagstype'  : 'XML',
               "\ 'kinds'      : [
                  "\ 'n:node set',
                  "\ 't:tagname'
               "\ ]
            "\ }

         "" }}}
         
         "" XSD {{{4

            "let g:tagbar_type_xsd = {
               "\ 'ctagstype'  : 'XSD',
               "\ 'kinds'      : [
                  "\ 'c:ComplexType',
                  "\ 's:SimpleType',
                  "\ 'e:Element'
               "\ ]
            "\ }

         "" }}}

      "" }}}

   "" }}}

   " Indentline {{{2

      let g:indentLine_setColors = 0
      let g:indentLine_bufNameExclude = ['Nerd_tree.*', '__vista__']
      let g:indentLine_bufTypeExclude = ['startify']

      if has("gui_running")
         let g:indentLine_char_list = ['|', '¦', '┆', '┊']
      else
         let g:indentLine_char_list = ['|']
      endif

   "}}}

   " Vim Indent Guides {{{2

      "let g:indent_guides_enable_on_vim_startup = 1
      "let g:indent_guides_start_level = 2
      "let g:indent_guides_indent_levels = 30
      "let g:indent_guides_guide_size = 1
      "let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']

   " }}}

   " Gundo {{{2

      "noremap <F9> :GundoToggle<CR>

   " }}}

   " Nerd Tree {{{2

      augroup nerd_tree
         au!
         au StdinReadPre * let s:std_in=1
      augroup END

      noremap <F8> :NERDTreeToggle<CR>
      noremap <C-n> :NERDTreeToggle<CR>

      " NerdTree-Git-Plugin {{{3

         let g:NERDTreeGitStatusIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : '☒',
            \ "Unknown"   : "?"
            \ }
      
      "}}}

   " }}}

   " BufTabLine {{{2

      " Keep buffers open without displaying them on the screen
      set hidden

      nnoremap <leader>bn :bnext<CR>
      nnoremap <leader>bp :bprev<CR>

   " }}}

   " Numbers {{{2
      
      let g:numbers_exclude = ['unite', 'tagbar', 'startify', 'gundo', 'vimshell', 'v3m', '__vista__', 'nerdtree', 'minimap']
      nnoremap <leader>jf :NumbersToggle<CR>
      nnoremap <leader>fj :NumbersOnOff<CR>

   " }}}

   " Comfortable Motion {{{2

      let g:comfortable_motion_scroll_down_key = 'j'
      let g:comfortable_motion_scroll_up_key = 'k'
      let g:comfortable_motion_no_default_key_mappings = 1

      "" Reset the C-f and C-b to be slightly less than what it defaults to
      "nnoremap <silent> <C-f> :call comfortable_motion#flick(200)<CR>
      "nnoremap <silent> <C-b> :call comfortable_motion#flick(-200)<CR>

      "" Friction and Air Resistance
      "let g:comfortable_motion_friction = 0.0
      "let g:comfortable_motion_air_drag = 4.0

      let g:comfortable_motion_impulse_multiplier = 1

      nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
      nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
      nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
      nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>

   "}}}

   " GitGutter {{{2

      let gitgutter_map_keys = 0
      "let g:gitgutter_max_signs = 1000  " default value
      let g:gitgutter_max_signs = 7500  " default value
      "let g:gitgutter_terminal_reports_focus=0
      let g:gitgutter_git_executable = 'C:\Program Files\Git\cmd\git.exe'
      let g:gitgutter_diff_relative_to = 'working_tree'

      autocmd User GitGutter call updateMyStatusLine()

   " }}}

   "" Vim-Signify {{{2

      "set updatetime=100
      "let g:signify_vcs_list = [ 'tfs' ]
      "let g:signify_vcs_cmds = {
        "\ 'tfs':      'tf diff -version:W -noprompt -format:Unified %f'
        "\ } 

      "let g:signify_vcs_cmds_diffmode = {
        "\ 'tfs':      'tf view -version:W -noprompt %f',
        "\ }
      "let g:signify_fold_contex = [0,5]
      ""let g:signify_realtime = 1

   ""}}}

   " vim-lsp {{{2

      if executable('pyls')
         " pip install python-language-server
         au User lsp_setup call lsp#register_server({
                  \ 'name': 'pyls',
                  \ 'cmd': {server_info->['pyls']},
                  \ 'whitelist': ['python'],
                  \ })
      endif

      function! s:on_lsp_buffer_enabled() abort
         setlocal omnifunc=lsp#complete
         setlocal signcolumn=yes
         nmap <buffer> gd <plug>(lsp-definition)
         nmap <buffer> <f2> <plug>(lsp-rename)
         " refer to doc to add more commands
      endfunction

      augroup lsp_install
         au!
         " call s:on_lsp_buffer_enabled only for languages that has the server registered.
         autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
      augroup END

   " }}}

   " vim-lsp-settings {{{2

      let g:lsp_settings_root_markers = [
      \   '.git',
      \   '.git/',
      \   '.svn',
      \   '.hg',
      \   '.bzr'
      \ ]

   " }}}

   " OmniSharp {{{2

      " Use the stdio OmniSharp-roslyn server
      let g:OmniSharp_server_stdio = 1

      " Use cygwin
      "let g:omniSharp_translate_cygwin_wsl = 1

      "" Set the executable path
      let g:OmniSharp_server_path = 'C:\Users\rzitex\.omnisharp\OmniSharp.exe'

      "" Set the type lookup function to use the preview window instead of echoing it
      "let g:OmniSharp_typeLookupInPreview = 1

      "" Timeout in seconds to wait for a response from the server
      "let g:OmniSharp_timeout = 5

      "" Highlight the completion documentation popup background/foreground the same as
      "" the completion menu itself, for better readability with highlighted
      "" documentation.
      "set completepopup=highlight:Pmenu,border:off

      "" Fetch full documentation during omnicomplete requests.
      "" By default, only Type/Method signatures are fetched. Full documentation can
      "" still be fetched when you need it with the :OmniSharpDocumentation command.
      "let g:omnicomplete_fetch_full_documentation = 1

      "" Set desired preview window height for viewing documentation.
      "" You might also want to look at the echodoc plugin.
      "set previewheight=5

      "" Update semantic highlighting after all text changes
      "let g:OmniSharp_highlight_types = 3
      "" Update semantic highlighting on BufEnter and InsertLeave
      "" let g:OmniSharp_highlight_types = 2

      "augroup omnisharp_commands
          "autocmd!

          "" Show type information automatically when the cursor stops moving.
          "" Note that the type is echoed to the Vim command line, and will overwrite
          "" any other messages in this space including e.g. ALE linting messages.
          "autocmd CursorHold *.cs OmniSharpTypeLookup

          "" The following commands are contextual, based on the cursor position.
          "autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
          "autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
          "autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
          "autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

          "" Finds members in the current buffer
          "autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

          "autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
          "autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
          "autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
          "autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
          "autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>

          "" Navigate up and down by method/property/field
          "autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>
          "autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>

          "" Find all code errors/warnings for the current solution and populate the quickfix window
          "autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>
      "augroup END

      "" Contextual code actions (uses fzf, CtrlP or unite.vim when available)
      "nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>
      "" Run code actions with text selected in visual mode to extract method
      "xnoremap <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>

      "" Rename with dialog
      "nnoremap <Leader>nm :OmniSharpRename<CR>
      "nnoremap <F2> :OmniSharpRename<CR>
      "" Rename without dialog - with cursor on the symbol to rename: `:Rename newname`
      "command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

      "nnoremap <Leader>cf :OmniSharpCodeFormat<CR>

      "" Start the omnisharp server for the current solution
      "nnoremap <Leader>ss :OmniSharpStartServer<CR>
      "nnoremap <Leader>sp :OmniSharpStopServer<CR>

      "" Enable snippet completion
      "" let g:OmniSharp_want_snippet=1

   " }}}

   " vim-instant-markdown {{{2

     "Uncomment to override defaults:
     "let g:instant_markdown_slow = 1
     "let g:instant_markdown_autostart = 0
     "let g:instant_markdown_open_to_the_world = 1
     "let g:instant_markdown_allow_unsafe_content = 1
     "let g:instant_markdown_allow_external_content = 0
     "let g:instant_markdown_mathjax = 1
     "let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
     "let g:instant_markdown_autoscroll = 0
     "let g:instant_markdown_port = 8888
     "let g:instant_markdown_python = 1

   " }}}

   " Vim-Notes {{{2

      "let g:notes_directories = ['~/vim-notes']
      "let g:notes_suffix = '.md'
      "let g:notes_word_boundaries = 1
      "let g:notes_unicode_enabled = 1
      "let g:notes_smart_quotes = 0
      "let g:notes_conceal_code = 1

      "if has("gui_running")
         "let g:notes_list_bullets = ['•', '◦', '▸', '▹', '▪', '▫']
      "else
         "let g:notes_list_bullets = ['-', '*', '+']
      "endif

   " }}}

   " VimWiki {{{2
      
   let g:vimwiki_list = [{'path': '~/vimwiki/'}]

   " }}}

   " LanguageTool {{{2

      let g:languagetool_jar='C:/ProgramData/chocolatey/lib/languagetool/tools/LanguageTool-4.8/languagetool-commandline.jar'
      let g:languagetool_lang='en-US'

      " Vim-Grammarous {{{3

         let g:grammarous#languagetool_cmd = 'languagetool'
         let g:grammarous#enable_rules = {'*': ['PASSIVE_VOICE']}
   
      " }}}

   " }}}

   " Rainbow {{{2

      let g:rainbow_active = 0 "1

   "}}}

   " Markdown-Preview.nvim {{{2

      " preview page title
      " ${name} will be replace with the file name
      let g:mkdp_page_title = '「${name}」'

      " recognized filetypes
      " these filetypes will have MarkdownPreview... commands
      let g:mkdp_filetypes = ['markdown']

   " }}}

   " auto-pairs {{{2

      " Set the values to autopair.
      let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''"}

   " }}}

   " Languages {{{2

      " All Languages {{{3

         augroup all_autocmd
            au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
         augroup END
      
      " }}}

      " SQL {{{3
         augroup sql
            au FileType sql vnoremap <Leader>rp :s/\<update\>\\|\<select\>\\|\<from\>\\|\<where\>\\|\<join\>\\|\<on\>\\|\<as\>\\|\<left join\>\\|\<inner join\>\\|\<group by\>\\|\<order by\>\\|\<distinct\>\\|\<top\>\\|\<like\>\\|\<begin\>\\|\<trans\>\\|\<transaction\>\\|\<commit\>\\|\<rollback\>\\|\<declare\>\\|\<set\>/\U&/ge<cr><esc>
         augroup END

      " }}}

      " Python {{{3

         augroup python
            au BufNewFile,BufRead *.py set tabstop=4
            au BufNewFile,BufRead *.py set softtabstop=4
            au BufNewFile,BufRead *.py set shiftwidth=4
            au BufNewFile,BufRead *.py set textwidth=79
            au BufNewFile,BufRead *.py set expandtab
            au BufNewFile,BufRead *.py set autoindent
            au FileType *.py let python_highlight_all=1
            au BufNewFile,BufRead *.py set fileformat=unix
         augroup END

      " }}}

      " JSON {{{3

         augroup json
           autocmd! 
           au BufRead,BufNewFile json set filetype=json
           au FileType json set autoindent 
           au FileType json set formatoptions=tcq2l 
           au FileType json set shiftwidth=4 
           au FileType json set softtabstop=4 tabstop=4
           au FileType json set expandtab 
           au FileType json set foldmethod=syntax 
           au FileType json nnoremap <leader>= :%! jq .<CR>
           au FileType json com! FormatJson %! jq .<CR>
         augroup END

      " }}}

      " XML {{{3

         augroup xml_grouping
            au!
            au FileType html,xml,xsd,xaml let g:xml_syntax_folding=4
            au FileType html,xml,xsd,xaml set cindent
            au FileType html,xml,xsd,xaml set formatoptions=tcq2l
            au FileType html,xml,xsd,xaml set shiftwidth=2 
            au FileType html,xml,xsd,xaml set softtabstop=2 tabstop=2 
            au FileType html,xml,xsd,xaml set expandtab 
            au FileType html,xml,xsd,xaml set foldmethod=indent 
            "au FileType xml exe ":silent %!xmllint.exe --format --recover - 2>NUL:"
            au FileType html,xml,xsd,xaml Autoformat
            au FileType xml,xsd,xaml nnoremap ,= :silent %!xmllint.exe --format --recover - 2>NUL:<CR>
         augroup END

         " HTML {{{4
            augroup html
               au!
               au FileType html nnoremap <C-F5> :silent !'C:\Users\TiminsKY\AppData\Local\Programs\Opera\launcher.exe' %:p<CR>
            augroup END
         "}}}

         " Markdown {{{4
            augroup md
               au!
               au FileType md nnoremap <C-F5> :silent !'C:\Users\TiminsKY\AppData\Local\Programs\Opera\launcher.exe' %:p<CR>
            augroup END
         "}}}
      
         " SLN {{{4
            augroup sln
               au!
               au BufRead, BufNewFile sln set filetype=sln
            augroup END
         " }}}
         
         " XSD {{{4

            augroup xsd
               au!
               au BufRead, BufNewFile xsd set filetype=xsd
            augroup END

         " }}}
      
         " XML {{{4
         
            augroup xml
               au!
               au BufRead, BufNewFile xml set filetype=xml
               au FileType *.Billing.XML foldlevelstart=5
            augroup END

      " }}}

         " XAML {{{4
            augroup xaml
               au!
               au BufRead, BufNewFile *.xaml set filetype=xaml
            augroup END
         " }}}

      " }}}

      " Powershell {{{3

         augroup ps1
            au!
            au BufRead, BufNewFile *.ps1 set filetype=ps1
            au FileType ps1 set cindent
            au FileType ps1 set formatoptions=tcq2l
            au FileType ps1 set shiftwidth=3 
            au FileType ps1 set softtabstop=3 tabstop=3
            au FileType ps1 set expandtab 
            au FileType ps1 set foldmethod=indent 
         augroup END

      " }}}

      " Visual Basic {{{3

         augroup vb
            au!
            au FileType vb set filetype=vb
         augroup END
         
         augroup bas
            au!
            au FileType bas set filetype=vb
         augroup END

      " }}}

      " Vimscript {{{3

         augroup vim
            au!
            au FileType,BufWinEnter vim silent! :%foldenable!
            au FileType,BufWinEnter vim silent! :%foldclose!
            au FileType,BufWinEnter vim set foldlevel=0
         augroup END
      
      "}}}

   " }}}

   " Custom Functions {{{2

      " XML {{{3
      
         function XmlBeautify() " {{{4
           call XmlMinify()
           execute "%s/></>\r</e"
           normal! gg=G
         endfunction " }}}
           
         function XmlMinify() " {{{4
           set filetype=xml
           filetype indent on
           normal! ggVGJ
           execute "%s/>\s\+</></e"
           execute "%s/> </></e"
         endfunction " }}}

         command! XmlBeautify    execute "call XmlBeautify()" | execute "call XmlBeautify()"
         command! XmlMinify      execute "call XmlMinify()"

      "}}}
      
      " Wrapping {{{3

         function ChooseWrap() " {{{4
            if &wrap
               silent call DisableDisplayWrapping()
               echom "Disabling Display Wrapping."
            else
               silent call EnableDisplayWrapping()
               echom "Enabling Display Wrapping."
            endif
         endfunction " }}}

         function EnableDisplayWrapping() " {{{4
            if !&wrap
               setlocal wrap nolist linebreak
               " don't skip wrapped lines
               nnoremap <buffer> k gk
               nnoremap <buffer> j gj
               vnoremap <buffer> k gk
               vnoremap <buffer> j gj
            endif
         endfunction " }}}

         function DisableDisplayWrapping() " {{{4
            if &wrap
               setlocal nowrap list nolinebreak
               nunmap <buffer> k
               nunmap <buffer> j
               vunmap <buffer> k
               vunmap <buffer> j
            endif
         endfunction " }}}

         nnoremap <leader>cw :call ChooseWrap()<CR>
      
      " }}}

      " Tab Stops {{{3

         function ChangeTabStops(...) " {{{4 
            let l:stops=&tabstop
            if a:0 == 0
               let l:stops = inputdialog("Tabstop value")
            else
               let l:stops=a:1
            endif
            if l:stops != ""
               let &tabstop=l:stops 
               let &softtabstop=l:stops 
               let &shiftwidth=l:stops
            endif
         endfunction " }}}

         nnoremap <silent> <leader>ts :call ChangeTabStops()<CR>
         nnoremap <silent> <leader>t2 :call ChangeTabStops(2)<CR>
         nnoremap <silent> <leader>t3 :call ChangeTabStops(3)<CR>
         nnoremap <silent> <leader>t4 :call ChangeTabStops(4)<CR>

      " }}}

      " grepping {{{3

         function FindAll() " {{{4
            call inputsave()
            let p = input('Enter pattern:')
            call inputrestore()
            execute 'vimgrep "'.p.'" % |copen'
         endfunction " }}}

         command! FindAll      execute "call FindAll()"

         nnoremap <leader>fa execute :Call FindAll()<cr>

      " }}}

      " Change GUI Font Size {{{3

         "if has("unix")
            "function! FontSizePlus ()
               "let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
               "let l:gf_size_whole = l:gf_size_whole + 1
               "let l:new_font_size = ' '.l:gf_size_whole
               "let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
            "endfunction

            "function! FontSizeMinus ()
               "let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
               "let l:gf_size_whole = l:gf_size_whole - 1
               "let l:new_font_size = ' '.l:gf_size_whole
               "let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
            "endfunction
         "else
            "function! FontSizePlus ()
               "let l:gf_size_whole = matchstr(&guifont, '\(:h\)\@<=\d\+$')
               "let l:gf_size_whole = l:gf_size_whole + 1
               "let l:new_font_size = ':h'.l:gf_size_whole
               "let &guifont = substitute(&guifont, ':h\d\+$', l:new_font_size, '')
            "endfunction

            "function! FontSizeMinus ()
               "let l:gf_size_whole = matchstr(&guifont, '\(:h\)\@<=\d\+$')
               "let l:gf_size_whole = l:gf_size_whole - 1
               "let l:new_font_size = ':h'.l:gf_size_whole
               "let &guifont = substitute(&guifont, ':h\d\+$', l:new_font_size, '')
            "endfunction
         "endif


         "if has("gui_running")
            "noremap <S-F12> :call FontSizeMinus()<CR>
            "noremap <F12> :call FontSizePlus()<CR>
            "command! IncreaseFontSize      :execute "call FontSizePlus()"
            "command! DecreaseFontSize      :execute "call FontSizeMinus()"
         "endif

      
      " }}}

   "}}}

   " Colemak {{{2

      " This hack allows me to type in insert mode and command 'bar' as colemak
      " while keeping all commands as QWERTY
      
      noremap! e f
      noremap! r p
      noremap! t g
      noremap! y j
      noremap! u l
      noremap! i u
      noremap! o y
      noremap! p ;
      noremap! s r
      noremap! d s
      noremap! f t
      noremap! g d
      noremap! j n
      noremap! k e
      noremap! l i
      noremap! ; o
      noremap! n k
      noremap! E F
      noremap! R P
      noremap! T G
      noremap! Y J
      noremap! U L
      noremap! I U
      noremap! O Y
      noremap! P :
      noremap! S R
      noremap! D S
      noremap! F T
      noremap! G D
      noremap! J N
      noremap! K E
      noremap! L I
      noremap! : O
      noremap! N K

   " }}}

" }}}
